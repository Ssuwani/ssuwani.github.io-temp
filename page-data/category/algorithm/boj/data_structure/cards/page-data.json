{"componentChunkName":"component---src-templates-post-tsx","path":"/category/algorithm/boj/data_structure/cards/","result":{"data":{"site":{"siteMetadata":{"title":"어서OpShow","author":"장수완","siteUrl":"https://ssuwani.github.io"}},"markdownRemark":{"id":"af9a85de-6347-55f5-a981-9eb43765afa9","excerpt":"백준 카드 정렬하기 문제 보러가기 https://www.acmicpc.net/problem/1715 문제 요약 N개의 카드덱이 주어졌을 때 카드를 섞는다. 섞기 위해서 카드를 봐야하는데 최소로 카드를 보는 경우를 구하라 조건 카드 덱의 수 N은 100,00…","html":"<div class=\"custom-block info\"><div class=\"custom-block-heading\">백준 카드 정렬하기 문제 보러가기</div><div class=\"custom-block-body\"><p><a href=\"https://www.acmicpc.net/problem/1715\">https://www.acmicpc.net/problem/1715</a></p></div></div>\n<h2 id=\"문제-요약\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%9A%94%EC%95%BD\" aria-label=\"문제 요약 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 요약</h2>\n<p>N개의 카드덱이 주어졌을 때 카드를 섞는다. 섞기 위해서 카드를 봐야하는데 최소로 카드를 보는 경우를 구하라</p>\n<h4 id=\"조건\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B1%B4\" aria-label=\"조건 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건</h4>\n<ul>\n<li>카드 덱의 수 N은 100,000 이하의 자연수</li>\n</ul>\n<h2 id=\"문제-접근-방식\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EC%8B%9D\" aria-label=\"문제 접근 방식 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 접근 방식</h2>\n<ol>\n<li>처음엔 조금 잘못 생각해서 덱을 정렬 한 뒤, 가장 많은 카드 수를 가진 덱은 1번, 그다음은 2번.. 이렇게 구하면 된다고 생각했다. 테스트 케이스에서는 잘 동작했는데 실제로 제출해보니 틀렸다.</li>\n<li>생각해보니 내가 작성한 방식은 가장 작은 수의 덱과 그다음 작은 수의 덱의 합이 전체 덱에서 가장 작은 수의 카드일때만 가능한 이야기였다.</li>\n<li>가장 작은 수의 덱과 그다음 작은 수의 덱의 합을 다시 리스트에 넣어 정렬하고 다시 가장 작은 수의 덱과 그 다음 작은 수의 덱을 합해 다시 리스트에 넣어 정렬하고를 반복해야 했다.</li>\n<li>계속해서 정렬해야 하므로 힙을 사용하는 것이 타당했다.</li>\n</ol>\n<h2 id=\"풀이코드\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4%EC%BD%94%EB%93%9C\" aria-label=\"풀이코드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> heapq\n\n\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ncards <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\theapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\tresult <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n\t\tmin_1 <span class=\"token operator\">=</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">)</span>\n\t\tmin_2 <span class=\"token operator\">=</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">)</span>\n\t\tnew_value <span class=\"token operator\">=</span> min_1<span class=\"token operator\">+</span>min_2\n\t\tresult <span class=\"token operator\">+=</span> new_value\n\t\theapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">,</span> new_value<span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/category/algorithm/boj/data_structure/cards/#%EB%AC%B8%EC%A0%9C-%EC%9A%94%EC%95%BD\">문제 요약</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/algorithm/boj/data_structure/cards/#%EC%A1%B0%EA%B1%B4\">조건</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/category/algorithm/boj/data_structure/cards/#%EB%AC%B8%EC%A0%9C-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EC%8B%9D\">문제 접근 방식</a></li>\n<li><a href=\"/category/algorithm/boj/data_structure/cards/#%ED%92%80%EC%9D%B4%EC%BD%94%EB%93%9C\">풀이코드</a></li>\n</ul>","frontmatter":{"title":"[백준-자료구조] 카드 정렬하기","description":"","date":"2021.11.30","emoji":"1️⃣","category":"algorithm"}}},"pageContext":{"slug":"/category/algorithm/boj/data_structure/cards/","relatedPosts":[{"node":{"fields":{"slug":"/category/algorithm/boj/greedy/flip/"},"frontmatter":{"title":"[백준-그리디] 뒤집기","date":"2021.12.09","emoji":"1️⃣","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/boj/greedy/lost_bracket/"},"frontmatter":{"title":"[백준-그리디] 잃어버린 괄호","date":"2021.12.08","emoji":"1️⃣","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/boj/greedy/treasure/"},"frontmatter":{"title":"[백준-그리디] 보물","date":"2021.12.07","emoji":"1️⃣","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/programmers/kakao/fail_ratio/"},"frontmatter":{"title":"[프로그래머스-2019 카카오 블라인드 채용] 실패율","date":"2021.12.03","emoji":"1️⃣","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/boj/implement/perfect_square/"},"frontmatter":{"title":"[백준-구현] 완전 제곱수","date":"2021.12.02","emoji":"1️⃣","category":"algorithm"}}}]}}}