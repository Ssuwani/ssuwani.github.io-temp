{"componentChunkName":"component---src-templates-post-tsx","path":"/category/blog/mnist-classification/3-docker/","result":{"data":{"site":{"siteMetadata":{"title":"어서OpShow","author":"장수완","siteUrl":"https://ssuwani.github.io"}},"markdownRemark":{"id":"08923a46-2c23-5854-8bd5-8725b5bb7ebc","excerpt":"도커 컨테이너로 각 서비스 구현 실험 날짜: 2021년 10월 10일\n실험자: Suwan Jang 앞서 만든 프론트엔드와 백엔드를 컨테이너로 동작되도록 구현한다. MNIST 모델 학습을 위한 코드도 컨테이너로 구현한다. 이때 학습코드와 Flask 서버과의 model…","html":"<h1 id=\"도커-컨테이너로-각-서비스-구현\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EC%BB%A4-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%A1%9C-%EA%B0%81-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B5%AC%ED%98%84\" aria-label=\"도커 컨테이너로 각 서비스 구현 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도커 컨테이너로 각 서비스 구현</h1>\n<p>실험 날짜: 2021년 10월 10일\n실험자: Suwan Jang</p>\n<p>앞서 만든 프론트엔드와 백엔드를 컨테이너로 동작되도록 구현한다.</p>\n<p>MNIST 모델 학습을 위한 코드도 컨테이너로 구현한다.</p>\n<p>이때 학습코드와 Flask 서버과의 model 공유가 되어야 하므로 Volume mount를 구현한다.</p>\n<h3 id=\"-stack\" style=\"position:relative;\"><a href=\"#-stack\" aria-label=\" stack permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📚 Stack</h3>\n<ul>\n<li>Docker</li>\n<li>Volume mount</li>\n</ul>\n<p><strong>Todo</strong></p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  React App Dockerize</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  MNIST Train Dockerize</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  Flask WebApp Dockerize</li>\n</ul>\n<p><strong>✓ React App Dockerize</strong></p>\n<p>아래 사이트를 거의 그대로 따라했다!! </p>\n<p><a href=\"https://velog.io/@esc/React-Docker\">React Docker 배포</a></p>\n<p>실행</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">docker run -p <span class=\"token number\">8300</span>:80 ssuwani/mnist_web-app</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>✓ MNIST Train Dockerize</strong></p>\n<ul>\n<li>\n<p>Dockerfile</p>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-docker line-numbers\"><code class=\"language-docker\"><span class=\"token keyword\">FROM</span> python<span class=\"token punctuation\">:</span>3.7\n\n<span class=\"token keyword\">COPY</span> . .\n\n<span class=\"token keyword\">RUN</span> pip install <span class=\"token punctuation\">-</span>r requirements.txt\n\n<span class=\"token keyword\">ENTRYPOINT</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"python\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"train.py\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"--epochs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--save-model\"</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>Build</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">docker build -t ssuwani/mnist_train <span class=\"token builtin class-name\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>\n<p>Run</p>\n<p>Flask 서버와 학습 모델을 공유해야 하기 때문에 Volume을 하나 생성해서 mount 하였다.</p>\n<p>Volume을 만드는 방법은 간단하다. <code class=\"language-text\">docker volume create vol</code> 이후에 아래를 실행하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">docker run -v vol:/app ssuwani/mnist_train --epochs <span class=\"token number\">1</span> --save-model --save-model-path /app/mnist.pt</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n</ul>\n<p><strong>✓ Flask WebApp Dockerize</strong></p>\n<ul>\n<li>\n<p>Dockerfile</p>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-docker line-numbers\"><code class=\"language-docker\"><span class=\"token keyword\">FROM</span> python<span class=\"token punctuation\">:</span>3.7\n\n<span class=\"token keyword\">COPY</span> . .\n\n<span class=\"token keyword\">RUN</span> pip install <span class=\"token punctuation\">-</span>r requirements.txt\n\n<span class=\"token keyword\">ENTRYPOINT</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"python\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"app.py\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"--model_path\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mnist.pt\"</span> <span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>Build</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">docker build -t ssuwani/mnist_app <span class=\"token builtin class-name\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>\n<p>Run</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">docker run -v vol:/app -p <span class=\"token number\">5000</span>:5000 ssuwani/mnist_app --model_path /app/mnist.pt</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/category/blog/mnist-classification/3-docker/#%EB%8F%84%EC%BB%A4-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%A1%9C-%EA%B0%81-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B5%AC%ED%98%84\">도커 컨테이너로 각 서비스 구현</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/blog/mnist-classification/3-docker/#-stack\">📚 Stack</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[MNIST Classification - 3] 도커 컨테이너로 각 서비스 구현","description":"","date":"2021.10.10","emoji":"📚","category":"blog"}}},"pageContext":{"slug":"/category/blog/mnist-classification/3-docker/","relatedPosts":[{"node":{"fields":{"slug":"/category/blog/interview/"},"frontmatter":{"title":"[면접준비] minimum 질문&답변","date":"2021.11.22","emoji":"❓","category":"blog"}}},{"node":{"fields":{"slug":"/category/blog/hackerrank_certification/"},"frontmatter":{"title":"해커랭크 인증서 발급 후기","date":"2021.11.19","emoji":"📚","category":"blog"}}},{"node":{"fields":{"slug":"/category/blog/m1-tensorflow/"},"frontmatter":{"title":"[Tensorflow] M1에서 Tensorflow GPU 사용하기 (Monterey)","date":"2021.11.13","emoji":"💪","category":"blog"}}},{"node":{"fields":{"slug":"/category/blog/effective-python/"},"frontmatter":{"title":"[책] 파이썬 코딩의 기술","date":"2021.11.02","emoji":"📚","category":"blog"}}},{"node":{"fields":{"slug":"/category/blog/mlops/simple_model_deploy_mnist/"},"frontmatter":{"title":"[MLOps] Vertex AI에서 모델 배포하기 (MNIST)","date":"2021.11.01","emoji":"🏃","category":"blog"}}}]}}}