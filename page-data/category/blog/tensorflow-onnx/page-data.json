{"componentChunkName":"component---src-templates-post-tsx","path":"/category/blog/tensorflow-onnx/","result":{"data":{"site":{"siteMetadata":{"title":"어서OpShow","author":"장수완","siteUrl":"https://ssuwani.github.io"}},"markdownRemark":{"id":"e3abc3a5-9266-5f11-8792-29904a5cef25","excerpt":"기본적인 사용법만을 작성한 글입니다.  모델 성능 확인을 위해 MNIST 데이터로 학습하는 과정을 추가했습니다. 참고한 사이트 tensorflow-onnx 목차 MNIST 모델 학습 및 저장 ONNX tf2onnx 설치 ONNX로 모델 변환 ONNX…","html":"<blockquote>\n<p>기본적인 사용법만을 작성한 글입니다. </p>\n</blockquote>\n<blockquote>\n<p>모델 성능 확인을 위해 MNIST 데이터로 학습하는 과정을 추가했습니다.</p>\n</blockquote>\n<p>참고한 사이트</p>\n<ul>\n<li><a href=\"https://github.com/onnx/tensorflow-onnx\">tensorflow-onnx</a></li>\n</ul>\n<h2 id=\"목차\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%B0%A8\" aria-label=\"목차 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목차</h2>\n<ol>\n<li>MNIST 모델 학습 및 저장</li>\n<li>\n<p>ONNX</p>\n<ol>\n<li>tf2onnx 설치</li>\n<li>ONNX로 모델 변환</li>\n<li>ONNX로 추론하기</li>\n<li>정확도 비교</li>\n<li>속도 비교</li>\n<li>조금 더 복잡한 CNN 모델 속도 비교</li>\n</ol>\n</li>\n<li>결론</li>\n</ol>\n<h2 id=\"mnist-모델-학습-및-저장\" style=\"position:relative;\"><a href=\"#mnist-%EB%AA%A8%EB%8D%B8-%ED%95%99%EC%8A%B5-%EB%B0%8F-%EC%A0%80%EC%9E%A5\" aria-label=\"mnist 모델 학습 및 저장 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MNIST 모델 학습 및 저장</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> tensorflow <span class=\"token keyword\">as</span> tf\n\n<span class=\"token comment\"># 데이터 불러오기</span>\n<span class=\"token punctuation\">(</span>train_x<span class=\"token punctuation\">,</span> train_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>test_x<span class=\"token punctuation\">,</span> test_y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>datasets<span class=\"token punctuation\">.</span>mnist<span class=\"token punctuation\">.</span>load_data<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntrain_x<span class=\"token punctuation\">,</span> test_x <span class=\"token operator\">=</span> train_x <span class=\"token operator\">/</span> <span class=\"token number\">255.0</span><span class=\"token punctuation\">,</span> test_x <span class=\"token operator\">/</span> <span class=\"token number\">255.0</span>\n\n<span class=\"token comment\"># 모델 정의</span>\nmodel <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span>\n        tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Flatten<span class=\"token punctuation\">(</span>input_shape<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'softmax'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 학습 과정 설정</span>\nmodel<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>\n    loss<span class=\"token operator\">=</span><span class=\"token string\">'sparse_categorical_crossentropy'</span><span class=\"token punctuation\">,</span>\n    optimizer<span class=\"token operator\">=</span><span class=\"token string\">'adam'</span><span class=\"token punctuation\">,</span>\n    metrics<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'accuracy'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span>\n\nmodel<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>train_x<span class=\"token punctuation\">,</span> train_y<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 모델 학습</span>\n\nmodel<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">'tf_model'</span><span class=\"token punctuation\">,</span> include_optimizer<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 모델 저장</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>코드를 보면 특이한 점이 하나 있을 것이다. 제일 아래 <code class=\"language-text\">model.save</code>에 <code class=\"language-text\">include_optimizer=False</code>가 추가되었다. 없이 실행하면 다음과 같은 오류를 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">slot_variable <span class=\"token operator\">=</span> optimizer_object.add_slot<span class=\"token punctuation\">(</span>\nAttributeError: <span class=\"token string\">'_UserObject'</span> object has no attribute <span class=\"token string\">'add_slot'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>최적화 함수인 <code class=\"language-text\">optimizer</code>에 관련되어 있음을 확인하였고 <a href=\"https://www.python2.net/questions-1719470.htm\">여기</a>에서 힌트를 얻어 파라미터를 추가하니 문제없이 동작하였다.</p>\n<h2 id=\"onnx\" style=\"position:relative;\"><a href=\"#onnx\" aria-label=\"onnx permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ONNX</h2>\n<h4 id=\"1-tf2onnx-설치\" style=\"position:relative;\"><a href=\"#1-tf2onnx-%EC%84%A4%EC%B9%98\" aria-label=\"1 tf2onnx 설치 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. tf2onnx 설치</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> -U tf2onnx\n\n<span class=\"token comment\"># 현재 나의 버전은 1.10.0</span>\n<span class=\"token comment\"># 알고있겠지만 -U는 --upgrade와 같다.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"2-onnx로-모델-변환\" style=\"position:relative;\"><a href=\"#2-onnx%EB%A1%9C-%EB%AA%A8%EB%8D%B8-%EB%B3%80%ED%99%98\" aria-label=\"2 onnx로 모델 변환 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. ONNX로 모델 변환</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">python -m tf2onnx.convert --saved-model tf_model --output model.onnx --opset <span class=\"token number\">12</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>CLI로 모델을 변환할 수 있었다. 이전에 저장한 <code class=\"language-text\">tf_model</code> 을 <code class=\"language-text\">model.onnx</code> 로 변환한다. 또한 <code class=\"language-text\">opset</code> 이라는 인자가 있는데 정확한 의미는 잘 모르겠지만 ONNX의 버전이라고 생각하면 좋을 거 같다. 사용 가능한 버전 및 자세한 정보는 <a href=\"https://github.com/onnx/tensorflow-onnx#tf2onnx---convert-tensorflow-keras-tensorflowjs-and-tflite-models-to-onnx\">여기</a> 를 확인하면 된다</p>\n<h4 id=\"3-onnx로-추론하기\" style=\"position:relative;\"><a href=\"#3-onnx%EB%A1%9C-%EC%B6%94%EB%A1%A0%ED%95%98%EA%B8%B0\" aria-label=\"3 onnx로 추론하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. ONNX로 추론하기</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> onnxruntime\n<span class=\"token keyword\">from</span> tensorflow<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> mnist\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\n<span class=\"token comment\"># 추론을 위한 MNIST 데이터 불러오기</span>\n<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>test_x<span class=\"token punctuation\">,</span> test_y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> mnist<span class=\"token punctuation\">.</span>load_data<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 학습시 입력과 데이터 형태를 맞춰주었다. 이전 학습시 float32는 하지 않았지만 자동적으로 변환되었던 부분이다.</span>\ntest_x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>test_x <span class=\"token operator\">/</span> <span class=\"token number\">255.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float32'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 모델 불러오기</span>\nort_model <span class=\"token operator\">=</span> onnxruntime<span class=\"token punctuation\">.</span>InferenceSession<span class=\"token punctuation\">(</span><span class=\"token string\">'model.onnx'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 추론하기</span>\nresult <span class=\"token operator\">=</span> ort_model<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'flatten_input'</span><span class=\"token punctuation\">:</span> test_x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"predict: \"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"real: \"</span><span class=\"token punctuation\">,</span> test_y<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#   >>></span>\n<span class=\"token comment\">### predict:  7</span>\n<span class=\"token comment\">### real:  7</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이전에 보지 못했던 <code class=\"language-text\">flatten_input</code>이라는 것을 확인할 수 있다. 입력을 명확히 해주는 부분이라 이해했는데 이렇게 해주는 이유는 여러 다양한 라이브러리를 통해 만들어진 모델을 ONNX로 변환하다보니 문제가 될 수 있는 부분을 사전에 방지하기 위해서라고 생각한다.</p>\n<p>그래서 저 부분에 필요한 <code class=\"language-text\">flatten_input</code> 이라는 key값은 다음의 코드의 결과에서 가져왔다</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">input_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> model<span class=\"token punctuation\">.</span>inputs<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">### ['flatten_input']</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>당연히 모델이 변경되면 추론에 필요항 key값도 변경된다. 아래는 모델이 변경되었을 때의 예시이다. 참고만 하면된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">inputs <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Input<span class=\"token punctuation\">(</span>shape<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nx <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span>\noutputs <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'softmax'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\nmodel <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">(</span>inputs<span class=\"token operator\">=</span>inputs<span class=\"token punctuation\">,</span> outputs<span class=\"token operator\">=</span>outputs<span class=\"token punctuation\">)</span>\n\ninput_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> model<span class=\"token punctuation\">.</span>inputs<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">### ['input_1']</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"4-추론-정확도-비교\" style=\"position:relative;\"><a href=\"#4-%EC%B6%94%EB%A1%A0-%EC%A0%95%ED%99%95%EB%8F%84-%EB%B9%84%EA%B5%90\" aria-label=\"4 추론 정확도 비교 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 추론 정확도 비교</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> tensorflow <span class=\"token keyword\">as</span> tf\n<span class=\"token keyword\">import</span> onnxruntime\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> accuracy_score\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\n<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>test_x<span class=\"token punctuation\">,</span> test_y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>datasets<span class=\"token punctuation\">.</span>mnist<span class=\"token punctuation\">.</span>load_data<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntest_x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>test_x <span class=\"token operator\">/</span> <span class=\"token number\">255.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float32'</span><span class=\"token punctuation\">)</span>\n\ntf_model <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>load_model<span class=\"token punctuation\">(</span><span class=\"token string\">'tf_model'</span><span class=\"token punctuation\">)</span>\nort_model <span class=\"token operator\">=</span> onnxruntime<span class=\"token punctuation\">.</span>InferenceSession<span class=\"token punctuation\">(</span><span class=\"token string\">'model.onnx'</span><span class=\"token punctuation\">)</span>\n\ntf_result <span class=\"token operator\">=</span> tf_model<span class=\"token punctuation\">(</span>test_x<span class=\"token punctuation\">)</span>\nort_result <span class=\"token operator\">=</span> ort_model<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'flatten_input'</span><span class=\"token punctuation\">:</span> test_x<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tf result: \"</span><span class=\"token punctuation\">,</span> accuracy_score<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>tf_result<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> test_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onnx result: \"</span><span class=\"token punctuation\">,</span> accuracy_score<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>ort_result<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> test_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">#   >>></span>\n<span class=\"token comment\">### tf   result:  0.9584</span>\n<span class=\"token comment\">### onnx result:  0.9584</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>성능의 변화가 전혀 없었다. 신기하네..</p>\n<h4 id=\"5-추론-속도-비교\" style=\"position:relative;\"><a href=\"#5-%EC%B6%94%EB%A1%A0-%EC%86%8D%EB%8F%84-%EB%B9%84%EA%B5%90\" aria-label=\"5 추론 속도 비교 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 추론 속도 비교</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> tensorflow <span class=\"token keyword\">as</span> tf\n<span class=\"token keyword\">import</span> onnxruntime\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> accuracy_score\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>test_x<span class=\"token punctuation\">,</span> test_y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>datasets<span class=\"token punctuation\">.</span>mnist<span class=\"token punctuation\">.</span>load_data<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntest_x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>test_x <span class=\"token operator\">/</span> <span class=\"token number\">255.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float32'</span><span class=\"token punctuation\">)</span>\n\ntf_model <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>load_model<span class=\"token punctuation\">(</span><span class=\"token string\">'tf_model'</span><span class=\"token punctuation\">)</span>\nort_model <span class=\"token operator\">=</span> onnxruntime<span class=\"token punctuation\">.</span>InferenceSession<span class=\"token punctuation\">(</span><span class=\"token string\">'model.onnx'</span><span class=\"token punctuation\">)</span>\n\ntf_start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    tf_model<span class=\"token punctuation\">(</span>test_x<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tf running time: \"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> tf_start<span class=\"token punctuation\">)</span>\n\nort_start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ort_model<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'flatten_input'</span><span class=\"token punctuation\">:</span> test_x<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onnx running time: \"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> ort_start<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#   >>></span>\n<span class=\"token comment\">### tf   running time:  1.4453675746917725</span>\n<span class=\"token comment\">### onnx running time:  1.1688730716705322</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>약 10% 정도 ONNX가 더 빠르다고 볼 수 있다. 조금 더 복잡한 모델을 정의해서 테스트 해봐야겠다.</p>\n<h4 id=\"6-조금-더-복잡한-cnn-모델-속도-비교\" style=\"position:relative;\"><a href=\"#6-%EC%A1%B0%EA%B8%88-%EB%8D%94-%EB%B3%B5%EC%9E%A1%ED%95%9C-cnn-%EB%AA%A8%EB%8D%B8-%EC%86%8D%EB%8F%84-%EB%B9%84%EA%B5%90\" aria-label=\"6 조금 더 복잡한 cnn 모델 속도 비교 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 조금 더 복잡한 CNN 모델 속도 비교</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">model <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span>\n        tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">\"relu\"</span><span class=\"token punctuation\">,</span> input_shape<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span>pool_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">\"relu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>MaxPooling2D<span class=\"token punctuation\">(</span>pool_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Conv2D<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">\"relu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">'relu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        tf<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>Dense<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">\"softmax\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>나머지는 동일해서 작성하지 않겠다!!</p>\n<p>결과는 약 2배 차이 🙌</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">tf   running time:  <span class=\"token number\">76.62953901290894</span>\nonnx running time:  <span class=\"token number\">36.256043434143066</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>사실 이 ONNX를 사용하려던 주목적은 다양한 라이브러리(Tensorflow, PyTorch, Scikit-Learn, ---)로 만들어진 모델을 통일성있게 서빙하기 위함이였는데 이러한 장점뿐만 아니라 속도 테스트에서 봤다시피 약 두배정도 빠르다. 사용하지 않을 이유가 없을 것 같다. ~</p>","tableOfContents":"<ul>\n<li><a href=\"/category/blog/tensorflow-onnx/#%EB%AA%A9%EC%B0%A8\">목차</a></li>\n<li><a href=\"/category/blog/tensorflow-onnx/#mnist-%EB%AA%A8%EB%8D%B8-%ED%95%99%EC%8A%B5-%EB%B0%8F-%EC%A0%80%EC%9E%A5\">MNIST 모델 학습 및 저장</a></li>\n<li>\n<p><a href=\"/category/blog/tensorflow-onnx/#onnx\">ONNX</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/blog/tensorflow-onnx/#1-tf2onnx-%EC%84%A4%EC%B9%98\">1. tf2onnx 설치</a></li>\n<li><a href=\"/category/blog/tensorflow-onnx/#2-onnx%EB%A1%9C-%EB%AA%A8%EB%8D%B8-%EB%B3%80%ED%99%98\">2. ONNX로 모델 변환</a></li>\n<li><a href=\"/category/blog/tensorflow-onnx/#3-onnx%EB%A1%9C-%EC%B6%94%EB%A1%A0%ED%95%98%EA%B8%B0\">3. ONNX로 추론하기</a></li>\n<li><a href=\"/category/blog/tensorflow-onnx/#4-%EC%B6%94%EB%A1%A0-%EC%A0%95%ED%99%95%EB%8F%84-%EB%B9%84%EA%B5%90\">4. 추론 정확도 비교</a></li>\n<li><a href=\"/category/blog/tensorflow-onnx/#5-%EC%B6%94%EB%A1%A0-%EC%86%8D%EB%8F%84-%EB%B9%84%EA%B5%90\">5. 추론 속도 비교</a></li>\n<li><a href=\"/category/blog/tensorflow-onnx/#6-%EC%A1%B0%EA%B8%88-%EB%8D%94-%EB%B3%B5%EC%9E%A1%ED%95%9C-cnn-%EB%AA%A8%EB%8D%B8-%EC%86%8D%EB%8F%84-%EB%B9%84%EA%B5%90\">6. 조금 더 복잡한 CNN 모델 속도 비교</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/category/blog/tensorflow-onnx/#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>","frontmatter":{"title":"Tensorflow ONNX","description":"","date":"2021.10.02","emoji":"","category":"blog"}}},"pageContext":{"slug":"/category/blog/tensorflow-onnx/","relatedPosts":[{"node":{"fields":{"slug":"/category/blog/interview/"},"frontmatter":{"title":"[면접준비] minimum 질문&답변","date":"2021.11.22","emoji":"❓","category":"blog"}}},{"node":{"fields":{"slug":"/category/blog/hackerrank_certification/"},"frontmatter":{"title":"해커랭크 인증서 발급 후기","date":"2021.11.19","emoji":"📚","category":"blog"}}},{"node":{"fields":{"slug":"/category/blog/m1-tensorflow/"},"frontmatter":{"title":"[Tensorflow] M1에서 Tensorflow GPU 사용하기 (Monterey)","date":"2021.11.13","emoji":"💪","category":"blog"}}},{"node":{"fields":{"slug":"/category/blog/effective-python/"},"frontmatter":{"title":"[책] 파이썬 코딩의 기술","date":"2021.11.02","emoji":"📚","category":"blog"}}},{"node":{"fields":{"slug":"/category/blog/mlops/simple_model_deploy_mnist/"},"frontmatter":{"title":"[MLOps] Vertex AI에서 모델 배포하기 (MNIST)","date":"2021.11.01","emoji":"🏃","category":"blog"}}}]}}}