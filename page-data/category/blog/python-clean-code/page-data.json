{"componentChunkName":"component---src-templates-post-tsx","path":"/category/blog/python-clean-code/","result":{"data":{"site":{"siteMetadata":{"title":"어서OpShow","author":"장수완","siteUrl":"https://ssuwani.github.io"}},"markdownRemark":{"id":"5916216b-daf0-5946-abdf-a33db401e27e","excerpt":"책 “파이썬 클린코드”를 읽고 내용을 정리햇습니다.  “소프트웨어 문제를 해결하는데 단 하나의 솔루션만 있는 것은 아니다” Trade off…","html":"<div class=\"custom-block info\"><div class=\"custom-block-heading\">책 “파이썬 클린코드”를 읽고 내용을 정리햇습니다. </div><div class=\"custom-block-body\"></div></div>\n<br/>\n<br/>\n<p>“소프트웨어 문제를 해결하는데 단 <strong>하나의 솔루션만 있는 것은 아니다</strong>” Trade off 가 있는 경우가 많은데 이럴 때 하나의 원칙을 따라가야한다. 책을 읽으면 하나의 원칙을 배울 수 있을 것이다.</p>\n<blockquote>\n<p>하지만 정답이라는 것은 없다. <strong>책을 읽고 동의하지 않아도 좋다.</strong> 발전적인 토론을 통해 다양한 의견을 검토하는 것을 권장한다!!</p>\n</blockquote>\n<h2 id=\"목차--아직-작성-중인-글입니다\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%B0%A8--%EC%95%84%EC%A7%81-%EC%9E%91%EC%84%B1-%EC%A4%91%EC%9D%B8-%EA%B8%80%EC%9E%85%EB%8B%88%EB%8B%A4\" aria-label=\"목차  아직 작성 중인 글입니다 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목차 (❗❗❗ 아직 작성 중인 글입니다.)</h2>\n<ol>\n<li><a href=\"#ch1\">소개, 코드 포매팅과 도구</a> ✅</li>\n<li><a href=\"#ch2\">파이썬스러운(Pythonic) 코드</a> ✅</li>\n<li><a href=\"#ch3\">좋은 코드의 일반적인 특징</a> ✅</li>\n<li>SOLID 원칙 🔳</li>\n<li>데코레이터를 사용한 코드 개선 🔳</li>\n<li>디스크립터로 더 멋진 객체 만들기 🔳</li>\n<li>제너레이터 사용하기 🔳</li>\n<li>단위 테스트와 리팩토링 🔳</li>\n<li>일반적인 디자인 패턴 🔳</li>\n<li>클린 아키텍처 🔳</li>\n</ol>\n<br/>\n<div class=\"custom-block info\"><div class=\"custom-block-heading\">예제 코드 다운로드 </div><div class=\"custom-block-body\"><p><a href=\"https://github.com/PacktPublishing/Clean-Code-in-Python\">https://github.com/PacktPublishing/Clean-Code-in-Python</a></p></div></div>\n<br/>\n<p><a id=\"ch1\"></a></p>\n<h1 id=\"ch1-소개-코드-포매팅과-도구\" style=\"position:relative;\"><a href=\"#ch1-%EC%86%8C%EA%B0%9C-%EC%BD%94%EB%93%9C-%ED%8F%AC%EB%A7%A4%ED%8C%85%EA%B3%BC-%EB%8F%84%EA%B5%AC\" aria-label=\"ch1 소개 코드 포매팅과 도구 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CH1. 소개, 코드 포매팅과 도구</h1>\n<ul>\n<li>프로그래밍 언어의 진정한 의미는 아이디어를 다른 개발자에게 전달하는 것이다.</li>\n<li>기술부채의 가장 안 좋은 점은, 장기적이고 근본적인 문제를 내포하고 있는 것이다.</li>\n<li>주석은 가급적 피해야한다. </li>\n<li>코드안에서 직접 문서화 하는 방법: Docstring, Annotation</li>\n</ul>\n<h2 id=\"11-docstring\" style=\"position:relative;\"><a href=\"#11-docstring\" aria-label=\"11 docstring permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1. Docstring</h2>\n<p>소스 코드에 포함된 문서, 코드의 특정 컴포넌트(모듈, 클래스, 메서드 또는 함수)에 대한 문서화</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token triple-quoted-string string\">\"\"\"This functions is intented to return the sum of two integer values\n  \n  :param int a: An integer to be computed\n  :param int b: An integer to be computed\n  :returns: The sum of two integer values\n  \"\"\"</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>주석은 코드로 아이디어를 제대로 표현하지 못했음을 나타내는 것이다.</p>\n<p>프로젝트 문서화를 위한 기본 골격을 만들어주는 도구: Sphinx, autodoc</p>\n<h2 id=\"12-annotation\" style=\"position:relative;\"><a href=\"#12-annotation\" aria-label=\"12 annotation permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2. Annotation</h2>\n<p>함수의 인자로 어떤 값이 와야 하는지 힌트를 주는 것</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<br/>\n<hr>\n<p><a id=\"ch2\"></a></p>\n<h1 id=\"ch2-파이썬스러운pythonic-코드\" style=\"position:relative;\"><a href=\"#ch2-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%8A%A4%EB%9F%AC%EC%9A%B4pythonic-%EC%BD%94%EB%93%9C\" aria-label=\"ch2 파이썬스러운pythonic 코드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CH2. 파이썬스러운(pythonic) 코드</h1>\n<p>고유한 관용구 -> “일반적으로” 더 좋은 성능을 낸다. </p>\n<h2 id=\"21-인덱스와-슬라이스\" style=\"position:relative;\"><a href=\"#21-%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%99%80-%EC%8A%AC%EB%9D%BC%EC%9D%B4%EC%8A%A4\" aria-label=\"21 인덱스와 슬라이스 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1. 인덱스와 슬라이스</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">my_nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n\nmy_nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># [1, 2]</span>\nmy_nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># [1, 3]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"211-자체-시퀀스-생성\" style=\"position:relative;\"><a href=\"#211-%EC%9E%90%EC%B2%B4-%EC%8B%9C%ED%80%80%EC%8A%A4-%EC%83%9D%EC%84%B1\" aria-label=\"211 자체 시퀀스 생성 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1.1. 자체 시퀀스 생성</h3>\n<p>파이썬에서는 리스트, 튜플, range, 문자열처럼 값이 연속적으로 이어진 자료형을 시퀀스 자료형(<em>sequence</em> types)라고 부른다. </p>\n<p>바로 위에서 인덱싱과 슬라이싱은 시퀀스 객체에서 <code class=\"language-text\">__getitem__</code>, <code class=\"language-text\">__len__</code> 을 구현되어 있기 때문에 사용가능했던 것이다. key 값으로 객체의 특정 요소를 가져오도록 하는것이 <code class=\"language-text\">__getitem__</code> 인데 이를 시퀀스 객체 아닌 경우에도 사용하도록 해보자.</p>\n<ol>\n<li>\n<p>시퀀스 객체를 감싸는 래퍼 클래스(캡슐화)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Items</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_values <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">.</span>__getitem__<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>values를 불러와 list로 즉, 시퀀스 데이터로 만들고 시퀀스 객채에서 기본적으로 제공되는 len과 getitem을 사용한 것이다.  values가 시퀀스 객체가 아니더라도 key 값을 통해 특정 객체의 요소를 가져올 수 있는 것이다.</p>\n</li>\n<li>\n<p>collections.UserList 부모 상속</p>\n<p>그렇다고 하는데 이해가 잘 되지는 않는다. ㅠㅠ </p>\n</li>\n<li>\n<p>자신만의 시퀀스를 구현 </p>\n<ul>\n<li>범위로 인덱싱하는 결과는 해당 클래스와 같은 타입의 인스턴스여야 한다. (인덱싱했는데 갑자기 다른 타입이 나오면 안돼!! )</li>\n<li>slice에 의해 제공된 범위는 파이썬이 하는 것처럼 마지막 요소는 제외해야 한다.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"22-컨텍스트-관리자\" style=\"position:relative;\"><a href=\"#22-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EA%B4%80%EB%A6%AC%EC%9E%90\" aria-label=\"22 컨텍스트 관리자 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2. <strong>컨텍스트 관리자</strong></h2>\n<p>주요 동작의 전후에 특정 작업을 꼭 실행하려면 어떻게 해야할까?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">~</span> blah blah <span class=\"token operator\">~</span>\n\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위의 코드는 file을 읽고 f에 할당하며 어떠한 일을 한다. 이후에 f에 할당된 리소스를 해제해준다. 이때 만약 blah에서 오류가 발생한다면?? f의 리소스는 해제되지 못하고 메모리에 남아 문제를 일으킬 수 있다. 그래서 다음과 같은 코드로 개선이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n  <span class=\"token operator\">~</span> blah blah <span class=\"token operator\">~</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n  f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>하지만 귀찮고 파이써닉 하지않다! 아래의 코드로 멋있게 구현이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n  <span class=\"token operator\">~</span> blah blah <span class=\"token operator\">~</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>with 문은 컨텍스트 관리자로 진입하게 한다. 어려운말로 open 함수는 컨텍스트 관리자 프로토콜을 구현한다.</p>\n<p>컨텍스트 관리자는 <code class=\"language-text\">__enter__</code>, <code class=\"language-text\">__exit__</code> 두개의 매직 메소드로 구성된다. 특정 코드의 시작과 끝에서 각각 두개의 함수가 실행된다고 이해하면 간단할 것 같다.</p>\n<p>그래서 <code class=\"language-text\">__enter__</code>, <code class=\"language-text\">__exit__</code>를 커스텀해서 주요코드의 앞뒤로 실행되게 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeHandler</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__enter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start: \"</span><span class=\"token punctuation\">,</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__exit__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> exc_type<span class=\"token punctuation\">,</span> ex_value<span class=\"token punctuation\">,</span> ex_traceback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end: \"</span><span class=\"token punctuation\">,</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">with</span> TimeHandler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello~ suwan\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>실행결과</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">start:  2021-10-17 11:36:59.408708\nHello~ suwan\nend:  2021-10-17 11:36:59.408927</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>위의 TimeHandler에서 <code class=\"language-text\">__exit__</code> 함수를 보면 <code class=\"language-text\">exc_type</code>, <code class=\"language-text\">ex_value</code>, <code class=\"language-text\">ex_traceback</code> 을 확인할 수 있다. 함수가 실행되다가 문제가 발생하면 변수에 저장된다. 또한 코드에 문제가 발생하더라도 <code class=\"language-text\">__exit__</code>는 문제없이 실행되는 것을 아래의 코드로 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">with</span> TimeHandler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello~ suwan\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">raise</span> NameError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>실행결과</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">start:  2021-10-17 11:40:31.713844\nHello~ suwan\nend:  2021-10-17 11:40:31.713978 &lt;- 문제가 발생했지만 실행되었다!\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 3, in &lt;module&gt;\nNameError: Error</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>주의할 점: <code class=\"language-text\">__exit__</code> 에서 <code class=\"language-text\">True</code> 를 반환하게 하면 Error가 발생하더라도 에러를 반환하지 못한다.</p>\n</blockquote>\n<p>책에서 <code class=\"language-text\">contextlib</code> 를 이용해서 위와 같은 일을하는 두가지 방법을 소개한다. 하나는 <code class=\"language-text\">Handler</code> 클래스를 정의하지 않고 함수 단위에서 제너레이터를 이요한 방법이고 또 하나는 <code class=\"language-text\">Handler</code> 클래스를 <code class=\"language-text\">contextlib.ContextDecorator</code>를 상속하여 정의하고 with 문 대신 데코레이터를 사용하는 방법이다.  두가지 방식의 장점이 명확하고 책에 설명되어 있지만 따로 정리하지는 않았다.</p>\n<h2 id=\"23-프로퍼티-속성과-객체-메서드의-다른-타입들\" style=\"position:relative;\"><a href=\"#23-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%86%8D%EC%84%B1%EA%B3%BC-%EA%B0%9D%EC%B2%B4-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EB%8B%A4%EB%A5%B8-%ED%83%80%EC%9E%85%EB%93%A4\" aria-label=\"23 프로퍼티 속성과 객체 메서드의 다른 타입들 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3. 프로퍼티, 속성과 객체 메서드의 다른 타입들</h2>\n<h4 id=\"파이썬에서의-밑줄\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%97%90%EC%84%9C%EC%9D%98-%EB%B0%91%EC%A4%84\" aria-label=\"파이썬에서의 밑줄 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬에서의 밑줄</h4>\n<p>java, cpp, c# 등에선 <code class=\"language-text\">public</code>, <code class=\"language-text\">private</code>, <code class=\"language-text\">protected</code> 를 통해 프토퍼티들의 공개 범위를 지정할 수 있다. 하지만 파이썬에선 모든 것이 <code class=\"language-text\">public</code> 이다. 단지 몇가지 규칙사항이 있을 뿐이다. 강제하는 것은 아니다.</p>\n<p>아래의 코드가 많은 것을 대신 설명해주리라 생각한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        self<span class=\"token punctuation\">.</span>_b <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n        self<span class=\"token punctuation\">.</span>__c <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n        \na <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">vars</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_A__c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>밑줄로 시작하는 속성은 해당 객체에서 private를 의미하고 호출되지 않기를 원하지만 말그대로 원할 뿐이다. 호출하려면 호출할 수 있다. 그리고 많은 사람들이 헷갈려하는 부분이 밑줄 두개에 대한 부분이다. 위의 예에서 보다시피 함수명 앞에 밑줄 두개를 넣으면 파이썬이 다른 이름으로 속성을 만든다. 이를 <strong>맹글링(name mangling)</strong>이라 한다. </p>\n<p>이중 밑줄을 사용하면 조금은 복잡하게 함수명이 만들어지니 private한 속성를 정의했다고 말할수도 있겠지만 사실 이는 파이써닉하지 못하다. 맹글링은 사실 여러 번 확장되는 클래스의 메서드를 이름 충돌 없이 오버라이드하기 위해 만들어졌기 때문이다. </p>\n<p>따라서 속성를 private으로 정의하려면 밑줄 하나만을 사용하고 파이썬스러운 관습을 지키도록하자!</p>\n<h3 id=\"231-프로퍼티\" style=\"position:relative;\"><a href=\"#231-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"231 프로퍼티 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3.1. <strong>프로퍼티</strong></h3>\n<p>객체의 값을 저장할 때 일반적으로 속성을 사용한다. 때로는 객체의 속성을 기반으로 다른 속성을 계속하고자 할 때도 있다. 이때 <code class=\"language-text\">프로퍼티</code>를 사용하는 것은 좋은 선택이다. 예제를 보면 조금 더 빠르게 이해가 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n\nEMAIL_FORMAT <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r\"[^@]+@[^@]+[^@]+\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">is_valid_email</span><span class=\"token punctuation\">(</span>potentially_valid_email<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span>EMAIL_FORMAT<span class=\"token punctuation\">,</span> potentially_valid_email<span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> username\n        self<span class=\"token punctuation\">.</span>_email <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token decorator annotation punctuation\">@property</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">email</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_email\n  \n<span class=\"token decorator annotation punctuation\">@email_setter</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">email</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> new_email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> is_valid_email<span class=\"token punctuation\">(</span>new_email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"유효한 이메일이 아님\"</span><span class=\"token punctuation\">)</span>\n\t\tself<span class=\"token punctuation\">.</span>_email <span class=\"token operator\">=</span> new_email\n  </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>email 이라는 속성에 값을 넣을건데, 넣을 때 추가적으로 유효성 검사를 거치는 예제이다. 이를 <code class=\"language-text\">property</code> 가 아닌 방법으로 구현하려면 새로운 메소드(set_)를 만들어줘야 하는데 이는 실제 코드가 무엇을 하는지 혼돈스럽고 어려운 경우를 초례할 수 있다. 객체의 속성에 값을 부여하는 것과 적절성을 판단하는 것은 같은 맥락에서의 이야기이다.  관련해서 아래의 중요한 조언이 이야기된다.</p>\n<blockquote>\n<p>메서드는 한 가지만 수행해야 한다. 작업을 처리한 다음, 상태를 확인하려면 메서드를 분리해야 한다.</p>\n</blockquote>\n<h2 id=\"4-이터러블-객체\" style=\"position:relative;\"><a href=\"#4-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%EA%B0%9D%EC%B2%B4\" aria-label=\"4 이터러블 객체 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 이터러블 객체</h2>\n<p>파이썬에서 list, tuple, set, dict는 기본적으로 for 루프를 통해 반복적으로 값을 가져올 수 있다. 즉 iterable하다.</p>\n<p>그러나 이외에도 직접 iterable한 객체를 만들 수 있다. iterable은 <code class=\"language-text\">__iter__</code> 매직 메서드를 구현한 객체, 이터레이터는 <code class=\"language-text\">__next__</code> 매직 메서드를 구현한 객체를 말한다.</p>\n<p>파이썬에서 객체를 반복할 수 있는지 확인하기 위해 두가지 과정을 순차적으로 거친다.</p>\n<ol>\n<li>객체가 <code class=\"language-text\">__next__</code> 나 <code class=\"language-text\">__iter__</code> 이터레이터 메서드 중 하나를 포함하는지 여부</li>\n<li>객체가 시퀀스이고 <code class=\"language-text\">__len__</code> 과 <code class=\"language-text\">__getitem__</code> 를 모두 가졌는지 여부</li>\n</ol>\n<p>두가지 방법에 대해 기본 구현을 해보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># __iter__ 를 활용</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Iterable_iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>_idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>_idx <span class=\"token operator\">!=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">yield</span> self<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>_idx<span class=\"token punctuation\">]</span>\n            self<span class=\"token punctuation\">.</span>_idx <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            \ni_obj <span class=\"token operator\">=</span> Iterable_iter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> i_obj<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    \n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">4</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># __getitem__ 를 활용</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Iterable_getitem</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      \ni_obj <span class=\"token operator\">=</span> Iterable_getitem<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> i_obj<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">4</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"5-컨테이너-객체\" style=\"position:relative;\"><a href=\"#5-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EA%B0%9D%EC%B2%B4\" aria-label=\"5 컨테이너 객체 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 컨테이너 객체</h2>\n<p>컨테이너 객체는 <code class=\"language-text\">__contains__</code> 메서드를 구현한 객체를 말한다. 이는 파이썬에서 in 키워드가 발견될 때 호출된다. 사용자는 <code class=\"language-text\">__contains__</code> 매직 메서드가 구현되어 있지 않은 객체도 직접 구현을 통해 컨테이너 객체를 만들어 <code class=\"language-text\">in</code> 을 사용할 수 있다.</p>\n<p>행복한 사람인지 체크하는 예제를 만들어보았다!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> happy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>happy <span class=\"token operator\">=</span> happy\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HappyCheck</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> threshold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>happy_threshold <span class=\"token operator\">=</span> threshold\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__contains__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>happy <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>happy_threshold\n\n          \np1 <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"suwan\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\np2 <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"gildong\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\nhc <span class=\"token operator\">=</span> HappyCheck<span class=\"token punctuation\">(</span>threshold <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> p <span class=\"token keyword\">in</span> hc<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">은 행복한사람\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">은 그렇지 않은 사람..ㅠㅠ\"</span></span><span class=\"token punctuation\">)</span>\n        \n<span class=\"token operator\">>></span><span class=\"token operator\">></span>\nsuwan은 행복한사람\ngildong은 그렇지 않은 사람<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>ㅠㅠ\n        </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"6-객체의-동적인-속성\" style=\"position:relative;\"><a href=\"#6-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EB%8F%99%EC%A0%81%EC%9D%B8-%EC%86%8D%EC%84%B1\" aria-label=\"6 객체의 동적인 속성 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 객체의 동적인 속성</h2>\n<p>객체에서 속성을 얻고자 할 때 속성이 있다면 손쉽게 값을 받아오지만 그렇지 않을 경우 에러를 반환한다. 지정되지 않은 속성에 접근할 때 내부적으로 <code class=\"language-text\">__getattr__</code> 메소드를 거치는데, 이를 직접 정의하면 새로운 속성을 정의하는 등 예외적인 재미있는 일들을 할 수 있다.</p>\n<h2 id=\"7-호출형callable-객체\" style=\"position:relative;\"><a href=\"#7-%ED%98%B8%EC%B6%9C%ED%98%95callable-%EA%B0%9D%EC%B2%B4\" aria-label=\"7 호출형callable 객체 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. 호출형(callable) 객체</h2>\n<p>매직 메서드 <code class=\"language-text\">__call__</code> 을 사용하면 객체를 일반 함수처럼 호출할 수 있다.</p>\n<p>입력된 파라미터와 동일한 값으로 몇 번이나 호출되었는지 카운팅하는 책의 예제이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CallCount</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_counts <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_counts<span class=\"token punctuation\">[</span>argument<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_counts<span class=\"token punctuation\">[</span>argument<span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> cc <span class=\"token operator\">=</span> CallCount<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> cc<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> cc<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> cc<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> cc<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> cc<span class=\"token punctuation\">(</span><span class=\"token string\">\"something\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"8-매직-메서드-요약\" style=\"position:relative;\"><a href=\"#8-%EB%A7%A4%EC%A7%81-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9A%94%EC%95%BD\" aria-label=\"8 매직 메서드 요약 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. 매직 메서드 요약</h2>\n<table>\n<thead>\n<tr>\n<th>문장</th>\n<th>매직메서드</th>\n<th>파이썬 컨셉</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>obj[key]<br />obj[i:j]<br />obj[i:j:k]</td>\n<td>__getitem__(key)</td>\n<td>첨자형(subscriptable) 객체</td>\n</tr>\n<tr>\n<td>with obj: …</td>\n<td>__enter__ / __exit__</td>\n<td>컨텍스트 관리자</td>\n</tr>\n<tr>\n<td>for i in obj: …</td>\n<td>__iter__ / __next__<br />__len__ / __getitem__</td>\n<td>이터러블 객체<br />시퀀스</td>\n</tr>\n<tr>\n<td>obj(*args, **kwargs)</td>\n<td>__call__(*args, **kwargs)</td>\n<td>호출형 객체</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<hr>\n<p><a id=\"ch3\"></a></p>\n<h1 id=\"ch3-좋은-코드의-일반적인-특징\" style=\"position:relative;\"><a href=\"#ch3-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EC%9D%98-%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%ED%8A%B9%EC%A7%95\" aria-label=\"ch3 좋은 코드의 일반적인 특징 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CH3. 좋은 코드의 일반적인 특징</h1>\n<p>이 장에서 훌륭한 소프트웨어 디자인을 위한 몇가지 원칙을 배운다.</p>\n<h2 id=\"1-계약에-의한-디자인\" style=\"position:relative;\"><a href=\"#1-%EA%B3%84%EC%95%BD%EC%97%90-%EC%9D%98%ED%95%9C-%EB%94%94%EC%9E%90%EC%9D%B8\" aria-label=\"1 계약에 의한 디자인 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 계약에 의한 디자인</h2>\n<p>코드가 정삭적으로 동작하기 위해 기대하는 것과 호출자가 반환 받기를 기대하는 것은 디자인의 하나가 되어야 한다. 여기서 계약이라는 개념이 생긴다.</p>\n<p><strong>계약에 의한 디자인</strong>이란 이런 것이다. 계약은 소프트웨어 컴포넌트간의 통신 중에 반드시 지켜야하는 몇 가지 규칙을 강제하는 것을 말한다. 계약을 위해 보통 사전조건과 사후조건을 명시한다. </p>\n<p>계약을 정의하는 이유는 오류가 발생할 때 쉽게 찾아내기 위함이다. 사전조건과 사후조건으로 나눴으므로 책임소재를 신속하게 파악할 수 있다.</p>\n<h3 id=\"사전조건\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%A0%84%EC%A1%B0%EA%B1%B4\" aria-label=\"사전조건 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사전조건</h3>\n<p>사전조건은 함수나 메서드가 제대로 동작하기 위해 보장해야 하는 모든 것을 말한다. 다시말하면 적절한 데이터를 전달했는지 판단하는 것이다.</p>\n<p> 유효성 검사를 클라이언트 혹은 함수내부에서 할 수 있지만, 보통의 경우 함수 내부에서 실행된다.</p>\n<h3 id=\"사후조건\" style=\"position:relative;\"><a href=\"#%EC%82%AC%ED%9B%84%EC%A1%B0%EA%B1%B4\" aria-label=\"사후조건 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사후조건</h3>\n<p>사후조건은 메서드 또는 함수가 반환된 후의 상태를 강제하는 계약을 말한다. </p>\n<h3 id=\"파이썬스러운-계약\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%8A%A4%EB%9F%AC%EC%9A%B4-%EA%B3%84%EC%95%BD\" aria-label=\"파이썬스러운 계약 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬스러운 계약</h3>\n<p>가장 좋은 방법은 메서드, 함수 및 클래스에 RuntimeError, ValueError를 발생시키는 제어 매커니즘을 추가하는 것이다. 문제를 정의하기 어렵다면 사용자 정의 예외를 만드는 것이 좋다.</p>\n<p>데코레이터를 통해 코드를 격리된 상태로 관리하는 것이 좋다.</p>\n<h3 id=\"계약에-의한-디자인-결론\" style=\"position:relative;\"><a href=\"#%EA%B3%84%EC%95%BD%EC%97%90-%EC%9D%98%ED%95%9C-%EB%94%94%EC%9E%90%EC%9D%B8-%EA%B2%B0%EB%A1%A0\" aria-label=\"계약에 의한 디자인 결론 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>계약에 의한 디자인 결론</h3>\n<p>디자인 원칙의 주된 가치는 문제가 있는 부분을 효과적으로 식별하는 데 있다.</p>\n<p>귀찮지만 이렇게하면 얻은 품질은 장기적으로 보상된다. </p>\n<ul>\n<li>타입체크를 위해 <code class=\"language-text\">mypy</code>를 사용하면 손쉽게 구현할 수 있다.</li>\n</ul>\n<h2 id=\"2-방어적-프로그래밍\" style=\"position:relative;\"><a href=\"#2-%EB%B0%A9%EC%96%B4%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"2 방어적 프로그래밍 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 방어적 프로그래밍</h2>\n<p>유효하지 않은 것들로부터 스스로 보호하는 기법</p>\n<p>다른 디자인 원칙과 서로 보완 관계에 있다.</p>\n<p>에러 핸들링과 어썰션에 대해 이야기한다.</p>\n<h3 id=\"에러-핸들링\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%ED%95%B8%EB%93%A4%EB%A7%81\" aria-label=\"에러 핸들링 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 핸들링</h3>\n<p>데이터 입력 확인 시 자주 사용된다.</p>\n<p>에러 핸들링의 주요 목적은 예상되는 에러에 대해서 실행을 계속할 수 있을지 아니면 극복할 수 없는 오류여서 프로그램을 중단할지를 결정하는 것이다.</p>\n<h4 id=\"값-대체\" style=\"position:relative;\"><a href=\"#%EA%B0%92-%EB%8C%80%EC%B2%B4\" aria-label=\"값 대체 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>값 대체</h4>\n<p>에러 핸들링에 값 대체라는 기법이 있는 것인데, 말 그대로 문제가 되는 변수의 값을 바꿔주는 것이다.</p>\n<p>하지만 이는 분명 견고성과 정확성 두가지 측면에서의 트레이프오프가 발생한다.</p>\n<p>가장 안전하게 값 대체를 사용할 수 있는 경우는 제공되지 않은 데이터에 기본 값을 사용할 때이다. (<code class=\"language-text\">dictionary get</code>, <code class=\"language-text\">os.getenv</code>)</p>\n<h4 id=\"예외처리\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC\" aria-label=\"예외처리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외처리</h4>\n<p>에러가 발생했을 때 다양한 기법으로 에러를 처리하고 진행할 수도 있지만 이렇게 계속 실행하는 것보다 차라리 실행을 멈추는 것이 더 좋다. 멈추되 이때 중요하는 것은 어떠한 에러인지 명확하게 알려주는 것이다.</p>\n<p>파이썬의 예외와 관련된 몇 가지 관장 사항이다.</p>\n<h5 id=\"a-올바른-수준의-추상화-단계에서-예외-처리\" style=\"position:relative;\"><a href=\"#a-%EC%98%AC%EB%B0%94%EB%A5%B8-%EC%88%98%EC%A4%80%EC%9D%98-%EC%B6%94%EC%83%81%ED%99%94-%EB%8B%A8%EA%B3%84%EC%97%90%EC%84%9C-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC\" aria-label=\"a 올바른 수준의 추상화 단계에서 예외 처리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>a. 올바른 수준의 추상화 단계에서 예외 처리</h5>\n<p>이를 위해 가장 기본적으로 지켜야할 것이 한가지 일을 하는 함수에 대해서 에러를 처리해야 한다는 것이다. 두가지 일을 하는 부분을 한번에 예외처리 하게되면 어디서 에러가 나는지 명확하게 찾기 어렵다.</p>\n<h5 id=\"b-traceback-노출-금지\" style=\"position:relative;\"><a href=\"#b-traceback-%EB%85%B8%EC%B6%9C-%EA%B8%88%EC%A7%80\" aria-label=\"b traceback 노출 금지 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>b. Traceback 노출 금지</h5>\n<p>개발을 하다보면 Traceback을 많이 보았을 것이다. 에러를 찾기위해 너무도 중요하게 사용되곤한다. Traceback은 오류를 발생시킨 함수 호출을 역추적한 내용을 말한다. 이는 악의적인 사용자에게 너무도 유용한 정보이므로 유출하지 말자.</p>\n<h5 id=\"c-비어있는-except-블럭-지양\" style=\"position:relative;\"><a href=\"#c-%EB%B9%84%EC%96%B4%EC%9E%88%EB%8A%94-except-%EB%B8%94%EB%9F%AD-%EC%A7%80%EC%96%91\" aria-label=\"c 비어있는 except 블럭 지양 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>c. 비어있는 except 블럭 지양</h5>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>만약 위와같이 <code class=\"language-text\">function()</code>을 실행하게 되면  해당 함수에 문제가 되더라도 문제가 되지 않는다;; 정말 큰 문제다</p>\n<h5 id=\"d-원본-예외-포함\" style=\"position:relative;\"><a href=\"#d-%EC%9B%90%EB%B3%B8-%EC%98%88%EC%99%B8-%ED%8F%AC%ED%95%A8\" aria-label=\"d 원본 예외 포함 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>d. 원본 예외 포함</h5>\n<p>오류 처리 과정에서 다른 오류를 발생시키고 메시지를 변경할 수도 있다. </p>\n<h3 id=\"파이썬에서-어설션-사용하기\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%97%90%EC%84%9C-%EC%96%B4%EC%84%A4%EC%85%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"파이썬에서 어설션 사용하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬에서 어설션 사용하기</h3>\n<p>어설션은 절대로 일어나지 않아야 하는 상황에 사용된다. 개선의 여지 없이 중단해야 할 critical한 문제에 대해서만 사용을 하고 관련 Log를 명확히 해주면 좋을 것 같다.</p>\n<h2 id=\"3-관심사의-분리\" style=\"position:relative;\"><a href=\"#3-%EA%B4%80%EC%8B%AC%EC%82%AC%EC%9D%98-%EB%B6%84%EB%A6%AC\" aria-label=\"3 관심사의 분리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 관심사의 분리</h2>\n<p>프로그램 기능의 일부분을 관심사라한다. 먼저 파급(ripple) 효과라는 개념이 나오는데 이는 어느 지점에서의 변화가 전체로 전파되는 것을 의미한다. 관심사가 분리되어 있지 않으면 파급 효과에 의해서 유지 보수성이 떨어진다. </p>\n<p>관심사의 분리는 기본적으로 파이썬 모듈, 패키지 그리고 모든 소프트웨어 컴포넌트에 대해서 적용된다.</p>\n<p>추가적으로 응집력과 결합력이라는 개념이 나온다.</p>\n<ul>\n<li>응집력: 객체가 작고 잘 정의된 목적을 가져야 하며 가능하면 작아야 한다는 의미</li>\n<li>결합력: 두 개 이상의 객체가 서로 어떻게 의존하는지를 의미</li>\n</ul>\n<p>잘 정의된 소프트웨어는 높은 응집력과 낮은 결합력을 갖는다.</p>\n<h2 id=\"4-개발지침-약어\" style=\"position:relative;\"><a href=\"#4-%EA%B0%9C%EB%B0%9C%EC%A7%80%EC%B9%A8-%EC%95%BD%EC%96%B4\" aria-label=\"4 개발지침 약어 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 개발지침 약어</h2>\n<p>좋은 디자인 아이디어를 주는 몇 가지 원칙을 검토한다.</p>\n<h4 id=\"1-dryoaoo\" style=\"position:relative;\"><a href=\"#1-dryoaoo\" aria-label=\"1 dryoaoo permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. DRY/OAOO</h4>\n<p>DRY(Do not Repeat Yourself)</p>\n<p>OAOO(Once and Only Once)</p>\n<p>중복을 피하라는 이야기이다. 코드에 있는 지식은 단 한번, 단 한 곳에서 정의되어야 한다. 코드를 변경하려고 할 때 수정이 필요한 곳은 단 한군데만 있어야 한다. 그 이유는 아래와 같다.</p>\n<ol>\n<li>오류가 발생하기 쉽다.</li>\n<li>비용이 비싸다.</li>\n<li>신뢰성이 떨어진다.</li>\n</ol>\n<p>너무도 당연한 이야기여서 이만 줄이겠다.</p>\n<h4 id=\"2-yagni\" style=\"position:relative;\"><a href=\"#2-yagni\" aria-label=\"2 yagni permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. YAGNI</h4>\n<p>YAGNI(You Ain’t Gonna Need it) </p>\n<p>과잉 엔지니어링을 방지하기 위한 원칙이다. 현재 코드를 작성하면서 굳이 미래의 일을 예측해서 상황을 처리하지 말라는 이야기이다. </p>\n<p>유지보수가 가능한 소프트웨어를 만드는 것은 미래의 요구 사항을 예측하는 것이 아니다. 오직 현재의 요구사항을 잘 해결하기 위한 소프트웨어를 작성하고 가능한 나중에 수정하기 쉽도록 작성하는 것이다.</p>\n<h4 id=\"3-kis\" style=\"position:relative;\"><a href=\"#3-kis\" aria-label=\"3 kis permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. KIS</h4>\n<p>KIS(Keep It Simple)</p>\n<p>YAGNI와 비슷하게 과잉 엔지니어링을 방지하기 위한 원칙이다. 코드는 단순할 수록 유지 관리가 쉽다.</p>\n<p>파이썬의 철학: 단순한 것이 복잡한 것보다 낫다.</p>\n<h4 id=\"4-eafplbyl\" style=\"position:relative;\"><a href=\"#4-eafplbyl\" aria-label=\"4 eafplbyl permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. EAFP/LBYL</h4>\n<p>EAFP(Easier to Ask Forgiveness than Permission) - 허락보다 용서를 구하는 것이 쉽다.</p>\n<p>LBYL(Look Before You Leap) - 도약하기 전에 살피라는 뜻</p>\n<p>결론부터 이야기하자면 파이썬에선 LBFP 원칙보다 EAFP 원칙이 더 바람직하다.</p>\n<p><strong>LBYL - 도약하기 전에 살피기 예시</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p><strong>EAFP - 허락보다 용서를 구하기 예시</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">except</span> FileNotFoundError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n  logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>사실 좀 긴가민가하다. EAFP의 에러 처리의 방식에서 FileNotFoundError가 try문의 에러를 다 담을 수 있는건지? LBYL의 else로 에러를 충분히 log할 수 있는지 너무 복잡해지지는 않는지? </p>\n<h2 id=\"5-컴포지션과-상속\" style=\"position:relative;\"><a href=\"#5-%EC%BB%B4%ED%8F%AC%EC%A7%80%EC%85%98%EA%B3%BC-%EC%83%81%EC%86%8D\" aria-label=\"5 컴포지션과 상속 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 컴포지션과 상속</h2>\n<p>객체지향 소프트웨어에서 흔히 말하는 다형성, 캡슐화 같은 주요 개념을 파이썬에서는 상속이라는 개념으로 이해하고 사용할 수 있다.</p>\n<p>상속은 강력한 개념이지만 위험도 있다. 가장 주된 위험은 부모 클래스를 확장하여 새로운 클래스를 만들 때마다 부모와 강력하게 결합된 새로운 클래스가 생긴다는 점이다. 앞서 “관심사의 분리”에서 결합력이 낮을수록 좋은 소프트웨어라고 이야기했었다. </p>\n<p>인터페이스 정의는 상속의 좋은 예이다. 어떤 객체에 인터페이스 방식을 강제하고자 할 때 구현을 하지 않은 기본 추상 클래스를 만들고, 실제 이 클래스를 상속하는 하위 클래스에서 적절하게 구현을 하도록 하는것이다.</p>\n<p>필요한 기능이 있다고 상위 클래스를 무작정 가져오는 것을 위험부담이 클 수 있다. 상위 클래스에 있는 메소드들이 하위 클래스에도 똑같이 적용이 되므로 사용자에게 불필요한, 또는 위험한 메서드가 있을 수 있다. 이럴 때 올바른 해결책은 컴포지션을 사용하는 것이다. <code class=\"language-text\">UserDict</code> 를 상속하는 것이 아니라 <code class=\"language-text\">UserDict</code> 를 사용하는 것을 이야기한다. </p>\n<h2 id=\"6-함수와-메서드의-인자\" style=\"position:relative;\"><a href=\"#6-%ED%95%A8%EC%88%98%EC%99%80-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EC%9D%B8%EC%9E%90\" aria-label=\"6 함수와 메서드의 인자 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 함수와 메서드의 인자</h2>\n<p>파이썬의 인자는 다른 많은 프로그래밍 언어와 마찬가지로 위치에 기반을 두어 호출할 수도 있고 키워드에 기반을 두어 호출할 수도 있다.</p>\n<p>변수 언패킹을 통해 가독성을 올릴 수 있다. 부분적인 언패킹도 가능하다는 것을 잊지 말자.</p>\n<p>너무 많은 인자를 사용하는 것은 나쁜 디자인의 징후이다.</p>\n<ul>\n<li>먼저 함수가 오직 한 가지 일만 하고 있는지 확인해보자.</li>\n<li>파라미터들이 서로 관계가 있다면 패킹해서 보내는 방법도 고려해보자.</li>\n<li><code class=\"language-text\">*args</code>, <code class=\"language-text\">**kwargs</code> 를 이용해서 정의할수도 있다. (하지만 서명을 잃어버린다는 점이 주는 가독성의 상실도 기억하자)</li>\n</ul>\n<h2 id=\"7-소프트웨어-디자인-우수-사례-결론\" style=\"position:relative;\"><a href=\"#7-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EB%94%94%EC%9E%90%EC%9D%B8-%EC%9A%B0%EC%88%98-%EC%82%AC%EB%A1%80-%EA%B2%B0%EB%A1%A0\" aria-label=\"7 소프트웨어 디자인 우수 사례 결론 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. 소프트웨어 디자인 우수 사례 결론</h2>\n<p>좋은 소프트웨어 디자인이란 소프트웨어 엔지니어링의 우수 사례를 따르고 언어의 기능이 제공하는 대부분의 장점을 활용하는 디자인이다.</p>\n<p><strong>소프트웨어의 독립성</strong></p>\n<p>모듈, 클래스 또는 함수를 변경하면 수정한 컴포넌트가 외부 세계에 영향을 미치지 않아야 한다. 물론 이것은 바람직하지만 항상 가능한 것은 아니다. 이것이 불가능하더라도 좋은 디자인은 가능한 한 영향을 최소화하려고 시도해야 한다.</p>\n<p>이는 또 단위 테스트시 빛을 바래는데, 하나의 함수가 다른 코드들과 완전히 독립적이라면 함수 변경 시 대상 함수에 대한 단위 테스트만으로 전체 회귀 테스트를 진행하지 않아도 됨을 보장할 수 있다.</p>","tableOfContents":"<ul>\n<li>\n<ul>\n<li><a href=\"/category/blog/python-clean-code/#%EB%AA%A9%EC%B0%A8--%EC%95%84%EC%A7%81-%EC%9E%91%EC%84%B1-%EC%A4%91%EC%9D%B8-%EA%B8%80%EC%9E%85%EB%8B%88%EB%8B%A4\">목차 (❗❗❗ 아직 작성 중인 글입니다.)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/category/blog/python-clean-code/#ch1-%EC%86%8C%EA%B0%9C-%EC%BD%94%EB%93%9C-%ED%8F%AC%EB%A7%A4%ED%8C%85%EA%B3%BC-%EB%8F%84%EA%B5%AC\">CH1. 소개, 코드 포매팅과 도구</a></p>\n<ul>\n<li><a href=\"/category/blog/python-clean-code/#11-docstring\">1.1. Docstring</a></li>\n<li><a href=\"/category/blog/python-clean-code/#12-annotation\">1.2. Annotation</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/category/blog/python-clean-code/#ch2-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%8A%A4%EB%9F%AC%EC%9A%B4pythonic-%EC%BD%94%EB%93%9C\">CH2. 파이썬스러운(pythonic) 코드</a></p>\n<ul>\n<li>\n<p><a href=\"/category/blog/python-clean-code/#21-%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%99%80-%EC%8A%AC%EB%9D%BC%EC%9D%B4%EC%8A%A4\">2.1. 인덱스와 슬라이스</a></p>\n<ul>\n<li><a href=\"/category/blog/python-clean-code/#211-%EC%9E%90%EC%B2%B4-%EC%8B%9C%ED%80%80%EC%8A%A4-%EC%83%9D%EC%84%B1\">2.1.1. 자체 시퀀스 생성</a></li>\n</ul>\n</li>\n<li><a href=\"/category/blog/python-clean-code/#22-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EA%B4%80%EB%A6%AC%EC%9E%90\">2.2. <strong>컨텍스트 관리자</strong></a></li>\n<li>\n<p><a href=\"/category/blog/python-clean-code/#23-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%86%8D%EC%84%B1%EA%B3%BC-%EA%B0%9D%EC%B2%B4-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EB%8B%A4%EB%A5%B8-%ED%83%80%EC%9E%85%EB%93%A4\">2.3. 프로퍼티, 속성과 객체 메서드의 다른 타입들</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/blog/python-clean-code/#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%97%90%EC%84%9C%EC%9D%98-%EB%B0%91%EC%A4%84\">파이썬에서의 밑줄</a></li>\n</ul>\n</li>\n<li><a href=\"/category/blog/python-clean-code/#231-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\">2.3.1. <strong>프로퍼티</strong></a></li>\n</ul>\n</li>\n<li><a href=\"/category/blog/python-clean-code/#4-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%EA%B0%9D%EC%B2%B4\">4. 이터러블 객체</a></li>\n<li><a href=\"/category/blog/python-clean-code/#5-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EA%B0%9D%EC%B2%B4\">5. 컨테이너 객체</a></li>\n<li><a href=\"/category/blog/python-clean-code/#6-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EB%8F%99%EC%A0%81%EC%9D%B8-%EC%86%8D%EC%84%B1\">6. 객체의 동적인 속성</a></li>\n<li><a href=\"/category/blog/python-clean-code/#7-%ED%98%B8%EC%B6%9C%ED%98%95callable-%EA%B0%9D%EC%B2%B4\">7. 호출형(callable) 객체</a></li>\n<li><a href=\"/category/blog/python-clean-code/#8-%EB%A7%A4%EC%A7%81-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%9A%94%EC%95%BD\">8. 매직 메서드 요약</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/category/blog/python-clean-code/#ch3-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EC%9D%98-%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%ED%8A%B9%EC%A7%95\">CH3. 좋은 코드의 일반적인 특징</a></p>\n<ul>\n<li>\n<p><a href=\"/category/blog/python-clean-code/#1-%EA%B3%84%EC%95%BD%EC%97%90-%EC%9D%98%ED%95%9C-%EB%94%94%EC%9E%90%EC%9D%B8\">1. 계약에 의한 디자인</a></p>\n<ul>\n<li><a href=\"/category/blog/python-clean-code/#%EC%82%AC%EC%A0%84%EC%A1%B0%EA%B1%B4\">사전조건</a></li>\n<li><a href=\"/category/blog/python-clean-code/#%EC%82%AC%ED%9B%84%EC%A1%B0%EA%B1%B4\">사후조건</a></li>\n<li><a href=\"/category/blog/python-clean-code/#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%8A%A4%EB%9F%AC%EC%9A%B4-%EA%B3%84%EC%95%BD\">파이썬스러운 계약</a></li>\n<li><a href=\"/category/blog/python-clean-code/#%EA%B3%84%EC%95%BD%EC%97%90-%EC%9D%98%ED%95%9C-%EB%94%94%EC%9E%90%EC%9D%B8-%EA%B2%B0%EB%A1%A0\">계약에 의한 디자인 결론</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/category/blog/python-clean-code/#2-%EB%B0%A9%EC%96%B4%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">2. 방어적 프로그래밍</a></p>\n<ul>\n<li>\n<p><a href=\"/category/blog/python-clean-code/#%EC%97%90%EB%9F%AC-%ED%95%B8%EB%93%A4%EB%A7%81\">에러 핸들링</a></p>\n<ul>\n<li><a href=\"/category/blog/python-clean-code/#%EA%B0%92-%EB%8C%80%EC%B2%B4\">값 대체</a></li>\n<li>\n<p><a href=\"/category/blog/python-clean-code/#%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC\">예외처리</a></p>\n<ul>\n<li><a href=\"/category/blog/python-clean-code/#a-%EC%98%AC%EB%B0%94%EB%A5%B8-%EC%88%98%EC%A4%80%EC%9D%98-%EC%B6%94%EC%83%81%ED%99%94-%EB%8B%A8%EA%B3%84%EC%97%90%EC%84%9C-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC\">a. 올바른 수준의 추상화 단계에서 예외 처리</a></li>\n<li><a href=\"/category/blog/python-clean-code/#b-traceback-%EB%85%B8%EC%B6%9C-%EA%B8%88%EC%A7%80\">b. Traceback 노출 금지</a></li>\n<li><a href=\"/category/blog/python-clean-code/#c-%EB%B9%84%EC%96%B4%EC%9E%88%EB%8A%94-except-%EB%B8%94%EB%9F%AD-%EC%A7%80%EC%96%91\">c. 비어있는 except 블럭 지양</a></li>\n<li><a href=\"/category/blog/python-clean-code/#d-%EC%9B%90%EB%B3%B8-%EC%98%88%EC%99%B8-%ED%8F%AC%ED%95%A8\">d. 원본 예외 포함</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/category/blog/python-clean-code/#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%97%90%EC%84%9C-%EC%96%B4%EC%84%A4%EC%85%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">파이썬에서 어설션 사용하기</a></li>\n</ul>\n</li>\n<li><a href=\"/category/blog/python-clean-code/#3-%EA%B4%80%EC%8B%AC%EC%82%AC%EC%9D%98-%EB%B6%84%EB%A6%AC\">3. 관심사의 분리</a></li>\n<li>\n<p><a href=\"/category/blog/python-clean-code/#4-%EA%B0%9C%EB%B0%9C%EC%A7%80%EC%B9%A8-%EC%95%BD%EC%96%B4\">4. 개발지침 약어</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/blog/python-clean-code/#1-dryoaoo\">1. DRY/OAOO</a></li>\n<li><a href=\"/category/blog/python-clean-code/#2-yagni\">2. YAGNI</a></li>\n<li><a href=\"/category/blog/python-clean-code/#3-kis\">3. KIS</a></li>\n<li><a href=\"/category/blog/python-clean-code/#4-eafplbyl\">4. EAFP/LBYL</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/category/blog/python-clean-code/#5-%EC%BB%B4%ED%8F%AC%EC%A7%80%EC%85%98%EA%B3%BC-%EC%83%81%EC%86%8D\">5. 컴포지션과 상속</a></li>\n<li><a href=\"/category/blog/python-clean-code/#6-%ED%95%A8%EC%88%98%EC%99%80-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EC%9D%B8%EC%9E%90\">6. 함수와 메서드의 인자</a></li>\n<li><a href=\"/category/blog/python-clean-code/#7-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EB%94%94%EC%9E%90%EC%9D%B8-%EC%9A%B0%EC%88%98-%EC%82%AC%EB%A1%80-%EA%B2%B0%EB%A1%A0\">7. 소프트웨어 디자인 우수 사례 결론</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[책] 파이썬 클린코드","description":"","date":"2021.10.24","emoji":"📚","category":"blog"}}},"pageContext":{"slug":"/category/blog/python-clean-code/","relatedPosts":[{"node":{"fields":{"slug":"/category/blog/interview/"},"frontmatter":{"title":"[면접준비] minimum 질문&답변","date":"2021.11.22","emoji":"❓","category":"blog"}}},{"node":{"fields":{"slug":"/category/blog/hackerrank_certification/"},"frontmatter":{"title":"해커랭크 인증서 발급 후기","date":"2021.11.19","emoji":"📚","category":"blog"}}},{"node":{"fields":{"slug":"/category/blog/m1-tensorflow/"},"frontmatter":{"title":"[Tensorflow] M1에서 Tensorflow GPU 사용하기 (Monterey)","date":"2021.11.13","emoji":"💪","category":"blog"}}},{"node":{"fields":{"slug":"/category/blog/effective-python/"},"frontmatter":{"title":"[책] 파이썬 코딩의 기술","date":"2021.11.02","emoji":"📚","category":"blog"}}},{"node":{"fields":{"slug":"/category/blog/mlops/simple_model_deploy_mnist/"},"frontmatter":{"title":"[MLOps] Vertex AI에서 모델 배포하기 (MNIST)","date":"2021.11.01","emoji":"🏃","category":"blog"}}}]}}}