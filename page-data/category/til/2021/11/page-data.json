{"componentChunkName":"component---src-templates-post-tsx","path":"/category/til/2021/11/","result":{"data":{"site":{"siteMetadata":{"title":"어서OpShow","author":"장수완","siteUrl":"https://ssuwani.github.io"}},"markdownRemark":{"id":"92b78dca-22ce-59a2-87e5-3d2716a2d692","excerpt":"Done  백준 알고리즘 1문제 풀기  파이썬 알고리즘 인터뷰 4장 - 빅오, 자료형 104p → 120p  파이썬 알고리즘 인터뷰 5장 - 리스트와 딕셔너리 121p → 135p  머신러닝 디자인 패턴 2.1 - 간단한 데이터 표현  머신러닝 디자인 패턴 2.2 - 디자인 패턴…","html":"<h3 id=\"done\" style=\"position:relative;\"><a href=\"#done\" aria-label=\"done permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Done</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  백준 알고리즘 1문제 풀기</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  파이썬 알고리즘 인터뷰 4장 - 빅오, 자료형 104p → 120p</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  파이썬 알고리즘 인터뷰 5장 - 리스트와 딕셔너리 121p → 135p</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  머신러닝 디자인 패턴 2.1 - 간단한 데이터 표현</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  머신러닝 디자인 패턴 2.2 - 디자인 패턴 1: 특정 해시</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  머신러닝 디자인 패턴 2.3 - 디자인 패턴 2: 임베딩</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  머신러닝 디자인 패턴 2.4 - 디자인 패턴 3: 특징 교차</li>\n</ul>\n<h2 id=\"1110--1150-알고리즘-1문제-풀기\" style=\"position:relative;\"><a href=\"#1110--1150-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-1%EB%AC%B8%EC%A0%9C-%ED%92%80%EA%B8%B0\" aria-label=\"1110  1150 알고리즘 1문제 풀기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>11:10 ~ 11:50 알고리즘 1문제 풀기</strong></h2>\n<p><strong>백준 피보나치 함수</strong></p>\n<p><a href=\"https://ssuwani.github.io/category/algorithm/boj/dp/fibo/\">https://ssuwani.github.io/category/algorithm/boj/dp/fibo/</a></p>\n<h2 id=\"1150--1250-파이썬-알고리즘-인터뷰-4장---빅오-자료형\" style=\"position:relative;\"><a href=\"#1150--1250-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%9D%B8%ED%84%B0%EB%B7%B0-4%EC%9E%A5---%EB%B9%85%EC%98%A4-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"1150  1250 파이썬 알고리즘 인터뷰 4장   빅오 자료형 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11:50 ~ 12:50 파이썬 알고리즘 인터뷰 4장 - 빅오, 자료형</h2>\n<h3 id=\"임의-정밀도\" style=\"position:relative;\"><a href=\"#%EC%9E%84%EC%9D%98-%EC%A0%95%EB%B0%80%EB%8F%84\" aria-label=\"임의 정밀도 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>임의 정밀도</strong></h3>\n<p>파이썬에서 엄청 큰 수도 오버플로우 없이 저장할 수 있는데 이는 사실 임의 정밀도 정수형으로 변환해서 저장되는 것이다.</p>\n<p>아주 큰 수는 다음과 같이 3개의 정수로 변환한 뒤 저장된다.</p>\n<p>$$123456789101112131415 = 437976919 * 2^{30<em>0} + 87719511 \\</em> 2^{30<em>1} + 107 * 2^{30</em>1}$$</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> ctypes\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PyLongObject</span><span class=\"token punctuation\">(</span>ctypes<span class=\"token punctuation\">.</span>Structure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _fields_ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ob_refcnt\"</span><span class=\"token punctuation\">,</span> ctypes<span class=\"token punctuation\">.</span>c_long<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span><span class=\"token string\">\"ob_type\"</span><span class=\"token punctuation\">,</span> ctypes<span class=\"token punctuation\">.</span>c_void_p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span><span class=\"token string\">\"ob_size\"</span><span class=\"token punctuation\">,</span> ctypes<span class=\"token punctuation\">.</span>c_ulong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span><span class=\"token string\">\"ob_digit\"</span><span class=\"token punctuation\">,</span> ctypes<span class=\"token punctuation\">.</span>c_uint <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\nbignum <span class=\"token operator\">=</span> <span class=\"token number\">123456789101112131415</span>\n\n<span class=\"token keyword\">for</span> d <span class=\"token keyword\">in</span> PyLongObject<span class=\"token punctuation\">.</span>from_address<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>bignum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ob_digit<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"가변객체와-불변객체\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%B3%80%EA%B0%9D%EC%B2%B4%EC%99%80-%EB%B6%88%EB%B3%80%EA%B0%9D%EC%B2%B4\" aria-label=\"가변객체와 불변객체 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가변객체와 불변객체</h3>\n<p><strong>파이썬의 모든것은 객체이며 불변 객체와 가변 객체로 나뉜다. 대표적으로 파이썬의 시퀀스 중 문자열, 튜플, 바이트는 불변 자료형이고 리스트는 가변 자료형이다. 그리고 추가적으로 숫자와 문자도 불변 객체이다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nb <span class=\"token operator\">=</span> a\na <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위의 예제의 결과는 10이 나온다. 파이썬에서 문자와 숫자도 불변 객체이다. a는 10이라는 객체를 참조했고 <code class=\"language-text\">b=a</code> 를 통해 b도 10을 참조했다. <code class=\"language-text\">a=9</code> 에서  10이라는 값이 9로 바뀐것이 아니라 a가 9를 참조했다. 따라서 10을 참조하고 있던 b는 여전히 10을 참조하고 있다.</p>\n<p>그렇다면 아래는 어떨까?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> a\na<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위의 예제는 문제없이 실행되었다는 것만 알아도 출력은 [1, 100, 3, 4]가 나오는 것을 짐작할 수 있다. 파이썬에서 리스트는 가변 시퀀스 객체이기 때문이다. 값이 바뀔 수 있다. 그렇다면 이건 어떨까?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> a\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>조금 헷갈릴 수 있지만(나만 헷갈릴수도 있지만…) 출력값은 [1,2,3,4]이다. a가 처음 참조하는 [1,2,3,4]는 새롭게 정의된 리스트이다. 그리고 <code class=\"language-text\">a=b</code> 를 통해 b 또한 [1,2,3,4]를 참조했다. 그런데 a에 <strong>새롭게 정의된</strong> 리스트가 할당되었다. 기존의 리스트가 변한게 아니라 새로운 리스트가 생성되었다는 게 중요하다.</p>\n<h3 id=\"is와-\" style=\"position:relative;\"><a href=\"#is%EC%99%80-\" aria-label=\"is와  permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>is와 ==</strong></h3>\n<p>is는 id() 값을 비교하는 함수, ==은 값을 비교하는 연산</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n\na <span class=\"token operator\">==</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\na <span class=\"token keyword\">is</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span>\n\na <span class=\"token operator\">==</span> copy<span class=\"token punctuation\">.</span>deepcopy<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\na <span class=\"token keyword\">is</span> copy<span class=\"token punctuation\">.</span>deepcopy<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"1250--1340-파이썬-알고리즘-인터뷰-5장---리스트-딕셔너리\" style=\"position:relative;\"><a href=\"#1250--1340-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%9D%B8%ED%84%B0%EB%B7%B0-5%EC%9E%A5---%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC\" aria-label=\"1250  1340 파이썬 알고리즘 인터뷰 5장   리스트 딕셔너리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>12:50 ~ 13:40 파이썬 알고리즘 인터뷰 5장 - 리스트, 딕셔너리</h2>\n<h3 id=\"리스트\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%8A%A4%ED%8A%B8\" aria-label=\"리스트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리스트</h3>\n<p>파이썬의 리스트는 연속된 공간에 요소를 배치한다. 확인해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">a_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> a <span class=\"token keyword\">in</span> a_list<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4368410928</span>\n<span class=\"token comment\"># 4368410960</span>\n<span class=\"token comment\"># 4368410992</span>\n<span class=\"token comment\"># 4368411024</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>CPython에서 리스트는 요소에 대한 포인터 목록을 갖고 있는 구조체로 선언되어 있다. 리스트는 객체로 되어 있는 모든 자료형을 포인터로 연결한다. 사실상 연결 리스트에 대한 포인터 목록을 배열 형태로 저장하고 있다. 덕분에 파이썬의 리스트는 배열과 연결 리스트를 합친 듯이 강력한 기능을 자랑한다.</p>\n<p>→ 사실 정확하게 이해가 되는 것은 아니나 어떤 의미인지는 알 것 같다. 위의 예시에서 a_list에 있는 각각의 자료형이 가지고 있는 ID 값이 포인터의 주소이고 그 주소들을 리스트가 관리해주는 것이라고 이해했다.</p>\n<p>앞선 예제에서 <code class=\"language-text\">a_list</code> 안에 있는 <code class=\"language-text\">a</code> 값들은 연속된 메모리 공간에 저장되었었다. 하지만 파이썬의 리스트에는 다양한 타입을 동시에 저장할 수 있다. 그러나 각 자료형의 크기는 저마다 서로 다르기 때문에 연속된 메모리 공간에 할당하는 것은 불가능하다. 결국 각각의 객체에 대한 참조로 구현할 수 밖에 없다. 그래서 리스트의 인덱스에 접근하기 위해선 포인터의 위치에 찾아가서 타입 코드를 확인하고 값을 일일이 살펴봐야 한다. → 편리한 대신 느리다.</p>\n<h3 id=\"딕셔너리\" style=\"position:relative;\"><a href=\"#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC\" aria-label=\"딕셔너리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>딕셔너리</h3>\n<p>인덱스를 숫자로만 지정할 수 있는 리스트와 달리 딕셔너리는 해시할 수 있는 모든 불변 객체(숫자형, 문자형, 튜플)를 키로 사용할 수 있다. → 이 과정을 해싱이라고 한다.</p>\n<p><strong>defaultdict</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\n\na <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># defaultdict(&lt;class 'int'>, {'A': 1})</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Counter</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> Counter\n\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\nb <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\nb <span class=\"token comment\"># Counter({3: 3, 2: 2, 1: 1})</span>\n\nb<span class=\"token punctuation\">.</span>most_common<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [(3, 3), (2, 2)]</span>\nb<span class=\"token punctuation\">.</span>most_common<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [(3, 3)]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>OrderDict</strong></p>\n<p>파이썬 3.7 이하의 딕셔너리에서 입력 순서가 유지되지 않았다.</p>\n<p>파이썬 2에서 테스트해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># Python 2.7.18</span>\n\na <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\na <span class=\"token comment\"># {1: 1, 2: 2}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>입력한 순서가 유지되지 않는 것을 확인할 수 있다.</p>\n<p>파이썬 3에서 테스트해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># Python 3.9.7</span>\n\na <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\na <span class=\"token comment\"># {2: 2, 1: 1}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>만약 실행환경이 3.7 이상인지 정확히 확인이 안된다면 위의 방법대로 하고 순서가 유지되기를 바라면 안된다. 안전하게 OrderDict를 사용하자</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> OrderedDict\n\na <span class=\"token operator\">=</span> OrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\na <span class=\"token comment\"># OrderedDict([(2, 2), (1, 1)])</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"1340--1410-머신러닝-디자인-패턴-21---간단한-데이터-표현\" style=\"position:relative;\"><a href=\"#1340--1410-%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-21---%EA%B0%84%EB%8B%A8%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%91%9C%ED%98%84\" aria-label=\"1340  1410 머신러닝 디자인 패턴 21   간단한 데이터 표현 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>13:40 ~ 14:10 머신러닝 디자인 패턴 2.1 - 간단한 데이터 표현</h2>\n<p><strong>2.1.1. 수치입력</strong></p>\n<p><strong>스케일링이 필요한 이유</strong></p>\n<p>특징의 상대적인 크기가 더 크다면 미분도 큰 경향이 있다.</p>\n<p>k-mean clustering 와 같은 알고리즘은 크기가 더 큰 특징에 크게 의존한다.</p>\n<p><strong>스케일링 하는 방법</strong></p>\n<ul>\n<li>Min-Max Scaling → 아웃라이어 떄문에 문제될 수 있다.</li>\n<li>클리핑 → 최솟값, 최댓값 대신에 합리적인 값을 사용한다</li>\n<li>Z 점수 정규화 → 평균과 표준편차를 이용해 선형적으로 스케일링 <code class=\"language-text\">x1_scaled = (x1 - mean_x1)/stddev_x1</code></li>\n<li>윈저라이징</li>\n</ul>\n<p>→ 데이터의 분포에 따라 사용한 스케일러를 선택할 수 있어야한다.</p>\n<p>아웃라이어를 버리지마라! → 프로덕션 환경에서 이러한 이상값을 만나지 않으리라는 보장이 없기 때문</p>\n<p>다시 말하면 무효한 입력은 버리되 유효한 입력은 버리지 마라</p>\n<p>데이터가 균등하게 분포되어 있지 않거나 종형 곡선처럼 분포되지 않았다면 입력에 Log 변환같은 비선형 변환을 적용하는 것이 좋다.</p>\n<p><strong>2.1.2 카테고리 입력</strong></p>\n<p>변수의 독립성을 유지하면서 카테고리형 변수를 매핑하는 가장 간단한 방법은 원-핫 인코딩이다.</p>\n<p>경우에 따라서는 수치 입력을 카테고리형으로 처리하고, 이를 원-핫 인코딩한 열에 매핑하는 것이 도움이 될 수 있다.</p>\n<p>수치입력이 인덱스인 경우 카테고리형으로 처리하는 것이 좋다 (예를들어 요일 1,2,3,4,5,6,7)</p>\n<p>입력과 라벨의 관계가 연속적이지 않을 때 카테고리형으로 처리하는 것이 좋다 (금요일의 교통량과 토요일의 교통량은 관계가 없다)</p>\n<h2 id=\"1410--1500-머신러닝-디자인-패턴-22---디자인-패턴-1-특정-해시\" style=\"position:relative;\"><a href=\"#1410--1500-%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-22---%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-1-%ED%8A%B9%EC%A0%95-%ED%95%B4%EC%8B%9C\" aria-label=\"1410  1500 머신러닝 디자인 패턴 22   디자인 패턴 1 특정 해시 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>14:10 ~ 15:00 머신러닝 디자인 패턴 2.2 - 디자인 패턴 1: 특정 해시</h2>\n<p>콜드 스타트 문제를 해결하기 위해 별도의 서빙 인프라가 필요할 수도 있구나.. !</p>\n<p>학습 시 사용된 어휘 외 입력을 처리하기 위해 Farm Fingerprint 함수를 사용할 수 있다. 검색해도 많은 정보가 없지만 책을 읽고 이해한 내용은 카테고리를 카테고리로 묶는 느낌이다.</p>\n<p>a, b, c, d, e, f 라는 카테고리가 있다면 각 카테고리를 해시화 해서 그룹으로 묶는다. 그래서 a, e, f가 하나의 그룹으로 묶이고 b, c, d가 하나의 그룹으로 묶였다고 가정하면 z라는 새로운 카테고리가 입력되면 해시화 했을 때 두개의 카테고리 중 하나에 속하게 된다;.</p>\n<p>콜드 스타트와 관련해서 처음 입력되는 카테고리는 특정 해시 카테고리에 속하게 되어 결과를 안좋게 낼 것이다. 하지만 <strong>모델을 주기적으로 재학습</strong> 한다면 새로운 데이터에 대한 예측을 제대로 할 수 있을 것이다.</p>\n<p>콜드 스타트가 문제되지 않는다면(카테고리에 대해 다 알고 있다면 ex) 월, 화, 수, 목, 금, 토, 일) 특징 해시를 쓰지 않는 것이 좋다.</p>\n<p>특징 해시를 사용하기 위해선 해시 카테고리의 수 즉 버킷의 수를 정해야 히는데 버킷의 수에 따라 다양한 충돌(문제)가 발생할 수 있다. 따라서 버킷의 수를 하이퍼파라미터로 설정하여 튜닝을 진행하는 것을 권장한다.</p>\n<h2 id=\"1750--2020-머신러닝-디자인-패턴-23---디자인-패턴-2-임베딩\" style=\"position:relative;\"><a href=\"#1750--2020-%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-23---%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-2-%EC%9E%84%EB%B2%A0%EB%94%A9\" aria-label=\"1750  2020 머신러닝 디자인 패턴 23   디자인 패턴 2 임베딩 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>17:50 ~ 20:20 머신러닝 디자인 패턴 2.3 - 디자인 패턴 2: 임베딩</h2>\n<p>카테고리형 데이터를 원-핫 인코딩을 사용해 학습 가능한 데이터로 변환할 수 있지만 이는 데이터간의 종속성을 완전히 무시한 변환이다.</p>\n<p>이미지 데이터에서 각 픽셀은 서로 독립적이지 않고, walk라는 단어는 book보다 run에 더 가깝다.</p>\n<p>임베딩은 고차원의 카테고리형 입력 변수를 저차원 공간의 실수 벡터로 매핑한다.</p>\n<p>임베딩 계층의 가중치는 훈련 중에 파라미터로 학습된다.</p>\n<p>이미지 임베딩에서 ImageNet으로 학습된 CNN 모델에 최종 소프트맥스 분류기 계층이 없으면 모델을 사용하여 주어진 입력에 대한 특징 벡터를 추출할 수 있다. 이 특징 벡터는 이미지의 모든 관련 정보를 포함하므로, 입력 이미지의 저차원 임베딩에 해당한다.</p>\n<p>임베딩 계층의 출력 차우너이 너무 작으면 많은 정보가 작은 벡터 공간에 강제로 들어가 콘텍스트 정보가 손실될 수 있다. 반면에 임베딩 차원이 너무 크면 임베딩의 특징 각각의 중요성을 잃게 된다. 원-핫 인코딩은 임베딩 차원이 극단적으로 큰 예시라고 할 수 있다.</p>\n<p>→ 최적의 임베딩 차원 수를 찾아야 한다. 시간을 아끼기 위해 경험적으로 나온 몇가지 규칙을 사용할 수 있다.</p>\n<ol>\n<li>고유한 카테고리형 원소 총수의 네제곱근을 한다</li>\n<li>임베딩 차원이 고유한 카테고리형 원소 총 수 제곱근의 약 1.6배여야 한다.</li>\n</ol>\n<p>1과 2의 범위내에서 찾아보는 것이 좋다.</p>\n<p>…</p>\n<p>중간중깐 멈추는 일들이 있었지만 늦은 이유는 제대로 이해를 못해서이다 ㅠㅠ. 데이터 웨어하우스, 콘텍스트 언어모델에 대한 개념이 약한 것 같다! 그래도 각각을 모른다고 깊게 들어가기보단 전반적인 흐름을 보고 다시와서 읽어보자</p>\n<h2 id=\"2020--2100-머신러닝-디자인-패턴-24---디자인-패턴-3-특징-교차\" style=\"position:relative;\"><a href=\"#2020--2100-%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-24---%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-3-%ED%8A%B9%EC%A7%95-%EA%B5%90%EC%B0%A8\" aria-label=\"2020  2100 머신러닝 디자인 패턴 24   디자인 패턴 3 특징 교차 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>20:20 ~ 21:00 머신러닝 디자인 패턴 2.4 - 디자인 패턴 3: 특징 교차</h2>\n<p>특징교차: 카테고리형 변수를 처리하는 방법</p>\n<p>특징 교차 디자인 패턴은 입력값의 각 조합을 별도의 특징으로 명시적으로 만들어, 모델이 입력 간의 관계를 더 빨리 학습하도록 도와준다.</p>\n<p>두 특징을 결합하면 비선형성을 모델 안에서 인코딩할 수 있으며, 이를 통해 각 특징이 개별적으로 제공할 수 있었던 것 이상의 예측을 가지게 된다. 결과적으로 특징 교차는 모델 학습 속도를 높여 비용을 절감하고, 모델 복잡성을 줄여 필요한 학습 데이터를 줄일 수 있다.</p>\n<p>특징 교차만을 사용하면 저밀도 벡터를 생성하게 될 수 있다. 이때는 특징 교차의 결과를 임베딩 계층으로 보내서 저차원 벡터를 만들 수도 있다.</p>\n<p>위도와 경도 같은 공간에 대한 특징 교차를 진행하면 카디널리티가 매우 크기 때문에 오버피팅된다. 이를 막기위해 특징 교차를 수행한 후 특징의 밀도를 높이는 L1 정규화 혹은 과대적합을 제한하는 L2 정규화와 함께 쓰는 것이 좋다.</p>\n<p>상관관계가 높은 두 특징을 교차하는 방식은 권하지 않는다. 두 특징의 상관관계가 높으면 특징 교차의 결과물이 모델에 새로운 정보를 가져다주지 못하기 때문</p>","tableOfContents":"<ul>\n<li>\n<ul>\n<li><a href=\"/category/til/2021/11/#done\">Done</a></li>\n</ul>\n</li>\n<li><a href=\"/category/til/2021/11/#1110--1150-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-1%EB%AC%B8%EC%A0%9C-%ED%92%80%EA%B8%B0\"><strong>11:10 ~ 11:50 알고리즘 1문제 풀기</strong></a></li>\n<li>\n<p><a href=\"/category/til/2021/11/#1150--1250-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%9D%B8%ED%84%B0%EB%B7%B0-4%EC%9E%A5---%EB%B9%85%EC%98%A4-%EC%9E%90%EB%A3%8C%ED%98%95\">11:50 ~ 12:50 파이썬 알고리즘 인터뷰 4장 - 빅오, 자료형</a></p>\n<ul>\n<li><a href=\"/category/til/2021/11/#%EC%9E%84%EC%9D%98-%EC%A0%95%EB%B0%80%EB%8F%84\"><strong>임의 정밀도</strong></a></li>\n<li><a href=\"/category/til/2021/11/#%EA%B0%80%EB%B3%80%EA%B0%9D%EC%B2%B4%EC%99%80-%EB%B6%88%EB%B3%80%EA%B0%9D%EC%B2%B4\">가변객체와 불변객체</a></li>\n<li><a href=\"/category/til/2021/11/#is%EC%99%80-\"><strong>is와 ==</strong></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/category/til/2021/11/#1250--1340-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%9D%B8%ED%84%B0%EB%B7%B0-5%EC%9E%A5---%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC\">12:50 ~ 13:40 파이썬 알고리즘 인터뷰 5장 - 리스트, 딕셔너리</a></p>\n<ul>\n<li><a href=\"/category/til/2021/11/#%EB%A6%AC%EC%8A%A4%ED%8A%B8\">리스트</a></li>\n<li><a href=\"/category/til/2021/11/#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC\">딕셔너리</a></li>\n</ul>\n</li>\n<li><a href=\"/category/til/2021/11/#1340--1410-%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-21---%EA%B0%84%EB%8B%A8%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%91%9C%ED%98%84\">13:40 ~ 14:10 머신러닝 디자인 패턴 2.1 - 간단한 데이터 표현</a></li>\n<li><a href=\"/category/til/2021/11/#1410--1500-%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-22---%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-1-%ED%8A%B9%EC%A0%95-%ED%95%B4%EC%8B%9C\">14:10 ~ 15:00 머신러닝 디자인 패턴 2.2 - 디자인 패턴 1: 특정 해시</a></li>\n<li><a href=\"/category/til/2021/11/#1750--2020-%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-23---%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-2-%EC%9E%84%EB%B2%A0%EB%94%A9\">17:50 ~ 20:20 머신러닝 디자인 패턴 2.3 - 디자인 패턴 2: 임베딩</a></li>\n<li><a href=\"/category/til/2021/11/#2020--2100-%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-24---%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-3-%ED%8A%B9%EC%A7%95-%EA%B5%90%EC%B0%A8\">20:20 ~ 21:00 머신러닝 디자인 패턴 2.4 - 디자인 패턴 3: 특징 교차</a></li>\n</ul>","frontmatter":{"title":"[TIL] 2021.11.14 일","description":"","date":"2021.11.14","emoji":"📚","category":"til"}}},"pageContext":{"slug":"/category/til/2021/11/","relatedPosts":[{"node":{"fields":{"slug":"/category/til/2021/10/25/"},"frontmatter":{"title":"[TIL] 2021.10.25 월","date":"2021.10.25","emoji":"📚","category":"til"}}}]}}}